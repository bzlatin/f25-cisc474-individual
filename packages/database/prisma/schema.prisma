datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments Enrollment[]
  submissions Submission[] @relation("SubmissionAuthor")
  feedback    Feedback[]   @relation("FeedbackAuthor")
}

model Course {
  id          String   @id @default(uuid())
  code        String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  enrollments Enrollment[]
  assignments Assignment[]

  @@unique([code, title])
  @@index([code])
}

model Enrollment {
  id       String     @id @default(uuid())
  userId   String
  courseId String
  role     CourseRole
  section  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId, role])
}

enum CourseRole {
  learner
  ta
  instructor
}

model Assignment {
  id          String    @id @default(uuid())
  courseId    String
  title       String
  description String?
  points      Int       @default(100)
  dueAt       DateTime?
  latePolicy  String?

  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Submission {
  id           String           @id @default(uuid())
  assignmentId String
  authorId     String
  type         SubmissionType
  storageKey   String?
  filename     String?
  contentType  String?
  url          String?
  status       SubmissionStatus @default(received)
  late         Boolean          @default(false)

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  author     User       @relation("SubmissionAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  score      Score?
  feedback   Feedback[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignmentId, authorId])
  @@index([type])
}

enum SubmissionType {
  file
  url
}

enum SubmissionStatus {
  received
}

model Score {
  id           String  @id @default(uuid())
  submissionId String  @unique
  points       Int
  comment      String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id           String @id @default(uuid())
  submissionId String
  authorId     String
  body         String

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  author     User       @relation("FeedbackAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([submissionId])
  @@index([authorId])
}
